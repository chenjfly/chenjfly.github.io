<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[本地Git与GitHub进行关联]]></title>
    <url>%2F2018%2F05%2F06%2F%E6%9C%AC%E5%9C%B0Git%E4%B8%8EGitHub%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%2F</url>
    <content type="text"><![CDATA[Git 作为 GitHub 所使用的一个工具，如果不把它与 GitHub 账号关联起来，那它的使用价值和体验就会大打折扣。这篇文章主要介绍如何把本地的 Git 与 GitHub 账号进行关联。 SSH 授权 GitHUb 上是基于 SSH 进行授权的，SSH 是一种网络协议，用于计算机之间进行远程加密的登陆。所以首先需要为本地的 Git 添加 SSH key 配置。 配置SSH keyWindows 主机在安装了 Git 之后，即可在 Git Bash 里输入： ssh-keygen -t rsa 这个命令的意思是执行 ssh-keygen.exe 这个程序，并且指定 SSH key 的秘钥采取 rsa 算法来生成。输入命令后连续输入三个回车即可在本地用户目录下看到一个 .ssh 的文件夹，里面是刚才所生成的秘钥和公钥。 接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，就可以进行授权的认证了。 GitHub 上添加 SSH key在 GitHub 设置里找到 SSH and GPG keys，就可以看到在右边有个添加新 SSH key 的地方，点击 New SSH key 进行配置。 在 Title 里随便命一个名标识这一个 key 就行，如果你有多台电脑，多可以进行授权。下方的 Key 就把之前生成在 .ssh 文件夹里的 id_rsa.pub 文件里的内容复制出来。完成后点击 Add SSH Key即可。 测试关联是否成功我们要做的工作都已经完成了，最后一步就是验证是否已经成功把本地的 Git 与 GitHub 进行了关联。验证方法也很简单，在 Git Bash 下输入 ssh -T git@github.com 如果看到下面这个提示，就说明已经关联成功。可以愉快的和 GitHub 玩耍了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解决问题的能力很重要]]></title>
    <url>%2F2018%2F04%2F24%2F%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E8%83%BD%E5%8A%9B%E5%BE%88%E9%87%8D%E8%A6%81%2F</url>
    <content type="text"><![CDATA[在我以前的认知里，解决问题的能力是每个人都有的，只是每个人能力强弱有所差异。在学校里，这个问题不是特别明显，但从我参加工作的一年以来，我对每个人解决问题的能力有了新的认知。现在我的观点是，一些小伙伴解决问题的能力真的是让人心累。说了问题不说为什么，那是耍流氓。那我就更流氓一点，也不说为什么，只说怎么做。我最认为解决问题的能力还是不错的，那就来结合自己的一些感悟，谈一谈如何提高解决问题的能力。 搜索能力『百度一下』吧，这是现代人在碰到问题时的第一想法。确实直接在浏览器中搜索是解决问题一个很好的办法，但搜索也不是每一个人都能够很好掌握的。搜索自然最重要的就是关键词，很多人可能都忽视了，其实给出一个能够高效搜索的关键词并不是一件很容易的事情，它甚至比你和他人叙述一个问题更为困难，因为需要在短短的几个词中描述清楚所需要解决的问题。确实有难度，对于这个问题呢，目前我也没什么系统的理论，同样做法也不太高效，但还是说一说我的方法： 既然选不出关键词，那我就当和别人叙述问题一样，把整个问题都打进输入框，结合现在浏览器强大的搜索能力，是能够找到一些匹配度很高的搜素结果的。 还有一种策略，就是像加砝码一样来添加关键词，不断地缩小搜索的范围。举个例子，比如想要搜索妹子的图片，那可以先搜索「妹子」，这时搜索结果肯定是铺天盖地的妹子图片，但很多都是我不喜欢的类型咋办嘞，那就在「妹子」的关键词前加一个「大眼」，那出来的结果比刚才好很多了，但不满意的还是太多，就继续加砝码，再加一个「大胸」。这时的搜索结果已经和我内心想的差不多了，那这时就是最优的搜索结果。 对于搜索能力，还有一个很关键的东西，工欲善其事必先利器！没错，说的就是搜索引擎，年轻时和度娘一直相处的很和谐，觉得度娘可以呀，聪明伶俐，啥都知道。人到中年时，见多了识广了，偶然在一堵墙后的小角落里碰上了谷哥，谷哥低调奢华有内涵，和谷哥畅聊了一段时间才发现，原来度娘只是徒有外表，自身的修炼还是欠缺火候。 相信热衷于度娘的小伙伴，搜索结果很多都是「百度知道」，「百度贴吧」之流的会出现在很靠前的地方，那这其实就是度娘不成熟的地方，急于向众人展示自己的羽毛，但其实却起到了相反的效果，会让人觉得搜索结果不可靠，不公平不公正。其次，由于国内的限制，导致度娘会曲解我的本意。例如，我想学习网络中VPN的相关技术，下面分别在百度、必应和谷歌中进行搜索。 可以很明显的看到结果，谷歌是最懂我心的，必应次之，而百度基本可以抛弃了。所以建议搜索在有条件的情况下，尽量使用谷歌搜索，不行的话使用必应代替，度娘就直接 Say Goodbye 吧。可能这样感觉不是太明显，但越用你约会觉得，度娘真的很皮。 遇到问题的态度相信每个人遇到问题时的态度都是不同的，我见到过的人中，有不管碰到啥问题都觉得，哇，好麻烦，搞不定呀；也有遇到问题喜欢先认真思考的人，思考着思考着发现，很多细节问题都不好解决；那还有的人配到任何问题，想都不想就觉得这事没问题，完全可以解决。 自我评估了一下，我觉得我属于第二种类型的人，但我认为，其实第三种类型的人才是解决问题最完美的，我们往往会忽视了心理暗示的作用，这说的可能很玄学，但事实也确实如此。每次在我思考问题一段时间后，问题总会跳出来打击我必胜的决心，而当啥都不管，认为没有我不能解决的问题时。问题真的来了，但在不停捣鼓后就是能够解决它。遇到问题时，不要惧怕问题，也不要考虑太多，只管按照既定路线去执行。不明之中，你会觉得，问题也不过如此。 小尾巴好了，这篇文章就和大家扯这么多了。写完我都不知道自己写了些啥，感觉毫无逻辑思路可言，所以写作途中本想放弃的，但自己又安慰了自己一波，毕竟才开始写作，没逻辑没思路是正常的。因此这篇文章才没有胎死腹中。我很喜欢的一个公众号作者 stormzhang 所到过，现在的人最重要的三项技能就是阅读、英语和写作。以前总觉得写作是很难的，现在更这么认为，自己所想的东西要输出出来，貌似很容易，但实际会发现，这真的是一种需要培养的能力。庆幸我写完了这篇文章，没在中途放弃，写作技能的提升又近了一步。 最后给自己加油打气！！！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[搭建自己的个人博客]]></title>
    <url>%2F2018%2F04%2F24%2F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这是一篇记录如何搭建个人博客的文章，在此之前也折腾过很多次。但博客长期荒废后，又完全忘了之前是怎么搭建的，当我这次想要重新开始自己的博客写作时，它顺利成章变成了我的第一篇博客，希望这次我能把写博客这件事情坚持下去。 在学习中，很早就发现，知识只进不出，学习效率是极低的，才学完感觉很简单，什么都懂，但是几天后就只记得一个大概了。所以打算以博客的方式来对知识进行一个积累和输出。这样的想法有过很多次，并且还实践过，但均死于我悲哀的执行力，这次一定可以坚持下去。好了，废话不多说，开始博客的搭建！！ ##需要的工具 git git 是大神 Linux 之父 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。需在电脑上安装git软件。官网下载:https://git-scm.com/downloads GitHub 全球最大的开源社区，主要提供基于 git 的版本托管服务。注册一个 GitHub 账号。GitHub官网:https://github.com/ Node.js Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台，因为 Hexo 博客系统是基于 Node.js 编写的，所以需要下载并安装 Node.js。官方下载:https://nodejs.org/zh-cn/ 安装配置HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。在开始之前，建议看一看官方文档，俗话说“知己知彼百战百胜”。 使用 npm 安装 Hexo：桌面右键鼠标，点击Git Bash Here，在命令行中输入： npm install hexo-cli -g GitHub 配置这里有个很有帮助的点需要提一下，一般情况下，我们接下来会做 Hexo 的初始化配置，但这可以思考一个问题，Hexo 通过hexo d命令发布后，会把 public 文件夹下的文件同步到 GitHub，public 文件夹内是根据 .md 生成的 html 文件，也就博客的静态文件。在玩博客一段后，某一天电脑需要重装系统了怎么办？直接把 GitHub 仓库里的代码克隆下来是没有用的，因为它已经是经过 Hexo 处理后的文件了，我们需要的是 Hexo 的源码。 当然我们可以把这个存放 Hexo 文件的文件夹备份，装完系统之后直接粘贴即可。虽然这想法是完全可行的，但通过硬件介质备份的方式在今天看来也太 Low 了。经过查阅相关资料后，看到大家解决办法最佳的就是通过 GitHub 来对 Hexo 的源文件进行备份。 思路是创建两个分支，master 和 hexo。master 分支用来存放生成的静态网页，而 hexo 分支用来存放 hexo 的源文件。之后想要对博客进行更新或是修改配置，可以通过这样的流程进行： 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo） 然后执行hexo g -d发布网站到master分支上。 下面开始实操： 开始前先要让 Git 和 GitHub 账号关联起来，可以在网上查到很多的教程，这里就不一一演示了。 首先是在 GitHub 上创建一个用于部署博客的仓库，注意仓库的名称必须是 username.github.io 仓库建好后会有一个默认的 master 分支，此时再创建一个 hexo 分支，并把 hexo 分支设备默认分支。 如何设置默认分支？在仓库菜单栏最右边点击 Settings，找到 Branches 把Default branch 切换为 hexo，并点击 Update. 最后，在本地电脑自己偏好的路径下，执行git clone 远程仓库地址把仓库克隆到本地电脑上。 Hexo 初始化从远程仓库克隆过来本地，文件夹内会有两个默认文件（.git 和 README.md），需把它们先剪切出来，因为 hexo 初始化时，必须要是空文件夹。之后在本地仓库文件夹内右键，点击 Git Bash Here，执行以下代码： 12hexo initnpm install 初始化完成后，再把之前的两个文件拷贝回来，否则无法正常上传 hexo 源码。文件夹中各文件目录的作用，在 Hexo 官网中都有详细的介绍。 执行下面语句，执行完即可登录localhost:4000查看效果 12hexo generatehexo server 将本地 Hexo 部署到 GitHub Pages做这一步的前提是 Git 与 GitHub 已成功关联，并且 GitHub 仓库已正确配置。 在 hexo 文件夹中找到 _config.yml文件并打开，按下图进行配置，这里填写 master 分支是因为之前提到过，现在我们仓库有两个分支，用 master 分支来存放 hexo 生成后的静态文件。 文件修改之后，在 hexo 文件夹下运行: hexo g -d 如果报错 ERROR Deployer not found: git，就是deployer没有安装成功，需要执行如下命令安装： npm install hexo-deployer-git --save 完成后再执行hexo g -d，博客就部署到Github上了。这时可以通过 GitHub Pages 为我们生成的外链 「https://[用户名].github.io/」，通过公网访问我们的个人博客了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GitHub Pages 地址解析到个人域名]]></title>
    <url>%2F2018%2F04%2F24%2FGitHub%20Pages%20%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%88%B0%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[在前一篇博客中，已经完成了整个博客从无到有的搭建，有了自己的博客https://chenjfly.github.io,但这还不是太完美。这是 GitHub Pages 自动给我们分配的域名，域名太长，也无法实现个性化的需求。下面我们要做的就是注册一个自己心仪的域名，并且把 GitHub Pages 地址解析到我们的个人域名上。 购买域名个人域名当然是不会有人送给你的，所以先到各大域名注册网站上去申购一个域名，现在国内的域名注册机构注册域名貌似不管是企业还是个人，都需要进行备案，所以如果闲麻烦可以到国外的注册机构进行购买。我个人是在阿里云旗下万网申购的域名，个人备案在之前弄博客的时候就已经备案过，时间已经很久远了，但我记得也并不是很麻烦。这里提供一个阿里云域名购买的连接，方便进行跳转。阿里云万网:www.net.cn 这个就是我所购买的域名~哈哈，4 块钱 1 年，感觉很是划算。具体的注册购买流程，按照一步一步提示来就行了，相信都到买域名这一步了，不会就太捞了。 域名解析 配置 CNAME 文件 在 \hexo\source 文件夹下创建文件 CNAME，内容就是自己的域名，例如我的域名是：flyblog.top,然后运行hexo g -d进行提交。 设置域名解析进入域名解析设置，设置相应的域名解析。 记录类型选择 CNAME 主机记录填 www 解析线路选择默认 记录值填 yourname.github.io TTL 值为 10 分钟 再添加一个解析，记录类型 A 主机记录填 @ 解析线路选择默认 记录值填个人 GitHub Pages 的 ip 地址（可以在 cmd 中 ping 一下） TTL 值为 10 分钟 这时域名解析设置已经完成，在等待 1 分钟左右后，即可通过个人域名来访问博客了！]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
</search>
